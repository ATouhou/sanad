<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns="http://java.sun.com/xml/ns/javaee" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd"
	version="3.0">
	
	<listener>
		<listener-class>ch.qos.logback.classic.selector.servlet.ContextDetachingSCL</listener-class>
	</listener>

	<filter>
		<filter-name>webappMetricsFilter</filter-name>
		<filter-class>com.codahale.metrics.servlet.InstrumentedFilter</filter-class>
	</filter>
	<filter-mapping>
		<filter-name>webappMetricsFilter</filter-name>
		<url-pattern>/*</url-pattern>
	</filter-mapping>

	<context-param>
		<param-name>contextClass</param-name>
		<param-value>org.springframework.web.context.support.AnnotationConfigWebApplicationContext</param-value>
	</context-param>
	<context-param>
		<param-name>contextConfigLocation</param-name>
		<param-value>org.soluvas.sanad.app.AppConfig</param-value>
	</context-param>
 	<context-param>
 		<param-name>contextInitializerClasses</param-name>
 		<param-value>org.soluvas.web.site.AppInitializer</param-value>
 	</context-param>
	<context-param>
		<param-name>configuration</param-name>
		<param-value>development</param-value>
	</context-param>
	
	<listener>
	    <listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
	</listener>
	<listener>
		<listener-class>org.springframework.web.context.request.RequestContextListener</listener-class>
	</listener>

	<!-- The filter-name matches name of a 'shiroFilter' bean inside applicationContext.xml -->
	<filter>
	    <filter-name>shiroFilter</filter-name>
	    <filter-class>org.springframework.web.filter.DelegatingFilterProxy</filter-class>
	    <init-param>
	        <param-name>targetFilterLifecycle</param-name>
	        <param-value>true</param-value>
	    </init-param>
	</filter>
	<!-- Make sure any request you want accessible to Shiro is filtered. /* catches all -->
	<!-- requests.  Usually this filter mapping is defined first (before all others) to -->
	<!-- ensure that Shiro works in subsequent filters in the filter chain:             -->
	<filter-mapping>
	    <filter-name>shiroFilter</filter-name>
	    <url-pattern>/api/*</url-pattern>
	</filter-mapping>
	
	<servlet>
		<servlet-name>sanad</servlet-name>
		<servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
<!-- 		<init-param> -->
<!-- 			<param-name>contextClass</param-name> -->
<!-- 			<param-value>org.springframework.web.context.support.AnnotationConfigWebApplicationContext</param-value> -->
<!-- 		</init-param> -->
		<init-param>
			<!-- use just the root WebApplicationContext -->
			<param-name>contextConfigLocation</param-name>
<!-- 			<param-value>org.soluvas.sanad.app.ServletConfig</param-value> -->
			<param-value></param-value>
		</init-param>
		<load-on-startup>1</load-on-startup>
	</servlet>
	<servlet-mapping>
		<servlet-name>sanad</servlet-name>
		<url-pattern>/api/*</url-pattern>
	</servlet-mapping>
	<filter>
		<filter-name>httpPutFormFilter</filter-name>
		<filter-class>org.springframework.web.filter.HttpPutFormContentFilter</filter-class>
	</filter>
	<filter-mapping>
		<filter-name>httpPutFormFilter</filter-name>
		<servlet-name>sanad</servlet-name>
	</filter-mapping>

	<listener>
		<!-- Avoid warning "SessionSupport error. Make sure you define org.atmosphere.cpr.SessionSupport as a listener in web.xml instead" -->
		<listener-class>org.atmosphere.cpr.SessionSupport</listener-class>
	</listener>
	<servlet>
		<description>Atmospherefilter</description>
		<servlet-name>Atmospherefilter</servlet-name>
		<servlet-class>org.atmosphere.cpr.AtmosphereServlet</servlet-class>
		<init-param>
			<param-name>applicationBean</param-name>
			<param-value>webApp</param-value>
		</init-param>
		<init-param>
			<param-name>org.atmosphere.useWebSocket</param-name>
			<param-value>true</param-value>
		</init-param>
		<init-param>
			<param-name>org.atmosphere.useNative</param-name>
			<param-value>true</param-value>
		</init-param>
		<init-param>
			<param-name>org.atmosphere.cpr.sessionSupport</param-name>
			<param-value>true</param-value>
		</init-param>
		<init-param>
			<!-- Avoid "Found multiple containers, please specify which one to use" warning -->
			<param-name>org.atmosphere.cpr.asyncSupport</param-name>
			<param-value>org.atmosphere.container.Tomcat7CometSupport</param-value>
		</init-param>
		<init-param>
			<param-name>org.atmosphere.cpr.AtmosphereInterceptor</param-name>
			<param-value>org.atmosphere.interceptor.NginxInterceptor</param-value>
		</init-param>
		<init-param>
			<param-name>filterMappingUrlPattern</param-name>
			<param-value>/*</param-value>
		</init-param>
		<init-param>
			<param-name>org.atmosphere.websocket.WebSocketProtocol</param-name>
			<param-value>org.atmosphere.websocket.protocol.EchoProtocol</param-value>
		</init-param>
		<init-param>
			<param-name>org.atmosphere.cpr.broadcastFilterClasses</param-name>
			<param-value>org.apache.wicket.atmosphere.TrackMessageSizeFilter</param-value>
		</init-param>
		<init-param>
			<param-name>org.atmosphere.cpr.broadcasterCacheClass</param-name>
			<param-value>org.atmosphere.cache.UUIDBroadcasterCache</param-value>
		</init-param>		
		<init-param>
			<!-- https://groups.google.com/forum/#!topic/atmosphere-framework/7YXJLymUwN8 -->
			<param-name>org.atmosphere.cpr.CometSupport.maxInactiveActivity</param-name>
			<param-value>30000</param-value>
		</init-param>		
		<load-on-startup>1</load-on-startup>
		<async-supported>true</async-supported>
	</servlet>
	<servlet-mapping>
		<servlet-name>Atmospherefilter</servlet-name>
		<url-pattern>/</url-pattern>
	</servlet-mapping>

	<session-config>
		<!-- convenient but still quite secure session timeout -->
		<session-timeout>30</session-timeout>
	</session-config>

</web-app>
